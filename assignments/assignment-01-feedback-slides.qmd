---
title: "Bio 723: Assignment 01 Feedback"
author: "Paul M. Magwene"
format: 
  revealjs:
    smaller: true
    embed-resources: true
editor: visual
execute:
  echo: true
---

## Robust code


I encourage you to write "robust" code solutions whenever possible.

A good rule of thumb for judging whether your solution is appropriately "robust" is to ask yourself:

> If I added additional observations or variables to this data set, or if the order of variables changed, would my code still compute the right solution?

## Accessing lists 

```{r}
john <- list(fname = "John", lname = "Smithee", age = 24,
             phone = "919-555-1234")
jane <- list(fname = "Jane", lname = "Doe", age = 39,
             phone = "919-555-4321")
jack <- list(fname = "Jack", lname = "Indabox", age = 13,
             phone = NA)
jill <- list(fname = "Jill", lname = "Bopeep", age = 18,
             phone = "919-555-1243")

phone.book <- list(john, jane, jack, jill)
```

Q: Write a code block illustrating how you could use list indexing to get back the first and last name of the first person in the phone book. The returned object should be a list.

#### Solution 1
```{r}
#| output: false
phone.book[[1]][c(1,2)]
```
#### Solution 2

```{r}
#| output: false
phone.book[[1]][c("fname", "lname")]
```
## Data frame filtering

```{r}
#| output-location: column
df <- data.frame(
  age = c(30, 26, 21, 29, 25, 22, 28, 24, 23, 20), 
  sex = rep(c("M","F"), 5), 
  wt = c(88, 76, 67, 66, 56, 74, 71, 60, 52, 72))
df
```

Q: Write a code block showing how to create a new data frame that includes only the odd numbered rows (i.e. rows 1, 3, 5, â€¦) and just the age and sex columns from df

#### Solution 1

```{r}
#| output: false
df[c(1,3,5,7,9), c(1,2)]
```

#### Solution 2

```{r}
#| output: false
df[seq(1, 10, by = 2), c("age", "sex")]
```

#### Solution 3

```{r}
#| output: false
df[seq(1, nrow(df), by = 2), c("age", "sex")]
```




